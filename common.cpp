#include "common.h"

void FlagDecrypt(const uint8_t* key, const uint8_t* iv, const uint8_t* cipher, uint8_t* decrypted){
	Twofish crypt;
	TwofishKey twKey;

	uint8_t cipherResult[4][16];
	uint8_t flagArray[4][16];
	uint8_t midKey[16];
	memcpy(flagArray, cipher, 64);
	crypt.PrepareKey(key, 32, &twKey);
	for ( int loop = 0 ; loop < 1000000 ; loop++ ){
		memcpy(midKey, iv, 16);
		for ( int round = 0 ; round < 4 ; round++ ){
			crypt.Decrypt(&twKey, cipherResult[round], flagArray[round]);
			LongXor(flagArray[round], midKey);
			memcpy(midKey, cipherResult[round],16);
		}
		memcpy(cipherResult, flagArray, 64);
	}
	memcpy(decrypted, cipherResult, 64);
}

void FlagEncrypt(const uint8_t* key, const uint8_t* iv, const uint8_t* flag, uint8_t* encrypted){
	Twofish crypt;
	TwofishKey twKey;

	uint8_t cipherResult[4][16];
	uint8_t flagArray[4][16];
	uint8_t midKey[16];
	memcpy(flagArray, flag, 64);
	crypt.PrepareKey(key, 32, &twKey);
	for ( int loop = 0 ; loop < 1000000 ; loop++ ){
		memcpy(midKey, iv, 16);
		for ( int round = 0 ; round < 4 ; round++ ){
			LongXor(midKey, flagArray[round]);
			crypt.Encrypt(&twKey, midKey, cipherResult[round]);
			memcpy(midKey, cipherResult[round], 16);
		}
		memcpy(flagArray, cipherResult, 64);
	}
	memcpy(encrypted, cipherResult, 64);
}

void LongXor( uint8_t* src, uint8_t* dst ){
	for ( int i = 0 ; i < 16 ; i++ ){
		src[i] ^= dst[i];
	}
}

uint bytes2hex(const uint8_t* bytes, uint blen, char* hex){
	for(uint i = 0 ; i < blen ; i++){
		hex[i*2] = (uint8_t)(bytes[i]>>4)>9?(bytes[i]>>4)+'A'-0xA:(bytes[i]>>4)+'0';
		hex[i*2+1] = (uint8_t)(bytes[i]&0xf)>9?(bytes[i]&0xf)+'A'-0xA:(bytes[i]&0xf)+'0';
	}
	return blen*2;
}

uint hex2bytes(const char* hex, uint blen, uint8_t* bytes){
	uint8_t pos,idx0,idx1;
	const uint8_t hashmap[] =
	{
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  !"#$%&'
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ()*+,-./
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
     0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
     0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // PQRSTUVW
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // XYZ[\]^_
     0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // `abcdefg
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // hijklmno
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pqrstuvw
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xyz{|}~.
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // ........
	};
	bzero(bytes, blen);
	for ( pos = 0 ; ((pos < (blen*2)) && (pos < strlen(hex))) ; pos+=2 ){
		idx0 = (uint8_t)hex[pos+0];
		idx1 = (uint8_t)hex[pos+1];
		bytes[pos/2] = (uint8_t) (hashmap[idx0]<<4) | hashmap[idx1];
	};
	return(0);
}
	
